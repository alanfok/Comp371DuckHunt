#version 330 core

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec3 vertexNormal_modelspace;  // You will need this when you do lighting
layout(location = 2) in vec3 vertexColor; 

// output to Fragment Shader
out vec3 v_color;

out vec3 normal;          // Transformed normal in View Space
out vec3 eyeVector;       // Vector from the vertex to the Camera in View Space
out vec4 lightVector;     // Vector from the vertex to the Light in View Space
						  // Length of lightVector is the distance between light and vertex
out vec4 backlightVector;
out vec4 gunLightVector;
out vec4 position_L;

// Uniform
// Values that stay constant for the whole mesh.
uniform mat4 WorldTransform;
uniform mat4 ViewTransform;
uniform mat4 ProjectonTransform;
uniform mat4 ViewTransform_Light;
uniform mat4 ProjectonTransform_Light;

// light position
uniform vec4 WorldLightPosition; // w = 0, so directional light
uniform vec4 BackLightPosition; // w = 0, so directional light
uniform vec4 GunLightPosition; // w = 1, so Point light
uniform vec4 DistanceFogColor;
uniform vec4 DistanceFogDetails;


void main()
{
	//Shading code
	mat4 MV_L = ViewTransform_Light * WorldTransform;
	mat4 MVP_L = ProjectonTransform_Light * MV_L;
	mat4 biasMatrix = mat4 (0.5f, 0.0f, 0.0f, 0.0f,
							0.0f, 0.5f, 0.0f, 0.0f,
							0.0f, 0.0f, 0.5f, 0.0f,
							0.5f, 0.5f, 0.5f, 1.0f);
	mat4 depthBiasMVP = biasMatrix * MVP_L;
	vec4 position_L = depthBiasMVP * vec4(vertexPosition_modelspace, 1);

	mat4 MV = ViewTransform * WorldTransform;
	mat4 MVP = ProjectonTransform * MV;

	// Output position of the vertex, in clip space : MVP * position
	gl_Position =  MVP * vec4(vertexPosition_modelspace, 1);
	v_color = vertexColor;

	// Prepare Data for Fragment Shader
	normal = vec3 (transpose(inverse(MV)) * vec4(vertexNormal_modelspace, 0.0f));
	
	eyeVector = -vec3(MV * vec4(vertexPosition_modelspace,1));

	//Sunlight
	if (WorldLightPosition.w == 0) 
	{
		lightVector = -(ViewTransform * WorldLightPosition);
	}
	else 
	{
		lightVector = ViewTransform * WorldLightPosition + vec4(eyeVector, 0.0f);
	}
	
	//Backlight
	if (BackLightPosition.w == 0) 
	{
		backlightVector = -(ViewTransform * BackLightPosition);
	}
	else 
	{
		backlightVector = ViewTransform * BackLightPosition + vec4(eyeVector, 0.0f);
	}

	//Gun Light
	if (GunLightPosition.w == 0) 
	{
		gunLightVector = -(ViewTransform * GunLightPosition);
	}
	else 
	{
		gunLightVector = ViewTransform * GunLightPosition + vec4(eyeVector, 0.0f);
	}
}
